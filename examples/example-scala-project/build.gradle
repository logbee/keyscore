buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

// tag::scala-example-project-build-gradle-plugins[]
apply plugin: 'scala'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
// end::scala-example-project-build-gradle-plugins[]

ext.publicationRepositoryUrl = getBuildPropertyValue("publication.repository.url")
ext.publicationRepositoryUser = getBuildPropertyValue("publication.repository.user")
ext.publicationRepositoryPassword = getBuildPropertyValue("publication.repository.password")

if (!isPublicationRepositoryUrlConfigured()) logger.warn("Publication tasks may fail due to missing repository url - set 'publication.repository.url'")
if (!isPublicationRepositoryUserConfigured()) logger.warn("Publication tasks may fail due to missing repository user - set 'publication.repository.user'")
if (!isPublicationRepositoryPasswordConfigured()) logger.warn("Publication tasks may fail due to missing repository password - set 'publication.repository.password'")

ext.revision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}()

// tag::scala-example-project-build-gradle-repositories[]
repositories {
    jcenter()
}
// end::scala-example-project-build-gradle-repositories[]

// tag::scala-example-project-build-gradle-dependencies[]
dependencies {

    compileOnly "org.scala-lang:scala-library:2.13.0"

    compileOnly "io.logbee.keyscore:keyscore-pipeline-api:0.3.0-alpha.5"
    compileOnly "io.logbee.keyscore:keyscore-pipeline-commons:0.3.0-alpha.5"

    testCompile "io.logbee.keyscore:keyscore-pipeline-testkit:0.3.0-alpha.5"
    testCompile "io.logbee.keyscore:keyscore-pipeline-commons:0.3.0-alpha.5"

    testCompile "org.scalatest:scalatest_2.13:3.0.8"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.5.0"
    testCompile "org.junit.platform:junit-platform-runner:1.5.0"
}
// end::scala-example-project-build-gradle-dependencies[]

// tag::scala-example-project-build-gradle-jar[]
jar {
    manifest {
        from ("src/main/resources/META-INF/MANIFEST.MF") // <1>
        attributes([
            'Implementation-Title' : project.name,
            'Implementation-Version': version,
            'Implementation-Revision' : revision,
            'Implementation-Vendor' : vendor
        ])
    }
    dependsOn(shadowJar)
}
// end::scala-example-project-build-gradle-jar[]

// tag::scala-example-project-build-gradle-publishing[]
publishing {
    publications {
        main( MavenPublication ) {
            groupId project.group
            artifactId project.name
            version project.version
            artifact (shadowJar)
        }
    }
    repositories {
        maven {
            url publicationRepositoryUrl
            credentials {
                username publicationRepositoryUser
                password publicationRepositoryPassword
            }
        }
    }
}
// end::scala-example-project-build-gradle-publishing[]

static def getBuildPropertyValue(String name) {
    def env = System.getenv()
    def envName = name.toUpperCase().replace('.', '_')

    if (env.containsKey(envName)) {
        return env.get(envName)
    }
    else {
        return System.getProperty(name)
    }
}

private def isPublicationRepositoryUrlConfigured() {
    return ext.publicationRepositoryUrl != null && !ext.publicationRepositoryUrl.empty
}

private def isPublicationRepositoryUserConfigured() {
    return ext.publicationRepositoryUser != null && !ext.publicationRepositoryUser.empty
}

private def isPublicationRepositoryPasswordConfigured() {
    return ext.publicationRepositoryPassword != null && !ext.publicationRepositoryPassword.empty
}
