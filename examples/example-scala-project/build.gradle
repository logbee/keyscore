import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerInspectNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.2'
    }
}

// tag::scala-example-project-build-gradle-plugins[]
apply plugin: 'scala'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.docker-remote-api'
// end::scala-example-project-build-gradle-plugins[]

ext.publicationRepositoryUrl = getBuildPropertyValue("publication.repository.url")
ext.publicationRepositoryUser = getBuildPropertyValue("publication.repository.user")
ext.publicationRepositoryPassword = getBuildPropertyValue("publication.repository.password")

if (!isPublicationRepositoryUrlConfigured()) logger.warn("Publication tasks may fail due to missing repository url - set 'publication.repository.url'")
if (!isPublicationRepositoryUserConfigured()) logger.warn("Publication tasks may fail due to missing repository user - set 'publication.repository.user'")
if (!isPublicationRepositoryPasswordConfigured()) logger.warn("Publication tasks may fail due to missing repository password - set 'publication.repository.password'")

ext.revision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}()

// tag::scala-example-project-build-gradle-repositories[]
repositories {
    jcenter()
}
// end::scala-example-project-build-gradle-repositories[]

// tag::scala-example-project-build-gradle-dependencies[]
dependencies {

    compileOnly "org.scala-lang:scala-library:2.13.0"

    compileOnly "io.logbee.keyscore:keyscore-pipeline-api:$keyscoreVersion"
    compileOnly "io.logbee.keyscore:keyscore-pipeline-commons:$keyscoreVersion"

    testCompile "io.logbee.keyscore:keyscore-pipeline-testkit:$keyscoreVersion"
    testCompile "io.logbee.keyscore:keyscore-pipeline-commons:$keyscoreVersion"

    testCompile "org.scalatest:scalatest_2.13:3.0.8"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.5.0"
    testCompile "org.junit.platform:junit-platform-runner:1.5.0"
}
// end::scala-example-project-build-gradle-dependencies[]

// tag::scala-example-project-build-gradle-jar[]
jar {
    manifest {
        from ("src/main/resources/META-INF/MANIFEST.MF") // <1>
        attributes([
            'Implementation-Title' : project.name,
            'Implementation-Version': version,
            'Implementation-Revision' : revision,
            'Implementation-Vendor' : vendor
        ])
    }
    dependsOn(shadowJar)
}
// end::scala-example-project-build-gradle-jar[]

// tag::scala-example-project-build-gradle-publishing[]
publishing {
    publications {
        main( MavenPublication ) {
            groupId project.group
            artifactId project.name
            version project.version
            artifact (shadowJar)
        }
    }
    repositories {
        maven {
            url publicationRepositoryUrl
            credentials {
                username publicationRepositoryUser
                password publicationRepositoryPassword
            }
        }
    }
}
// end::scala-example-project-build-gradle-publishing[]

task setupDockerNetwork(type: DockerInspectNetwork) {
    finalizedBy 'createContainerNetwork'
    networkId = project.properties['containerNetwork']
    setupDockerNetwork.ext.createNetwork = false
    onError { exception ->
        if (exception.message.contains('not found')) {
            println("Network " + project.properties['containerNetwork'] + " not found")
            setupDockerNetwork.ext.createNetwork = true
        } else throw exception
    }
}

task createContainerNetwork(type: DockerCreateNetwork) {
    onlyIf {
        setupDockerNetwork.createNetwork
    }
    networkId = project.properties['containerNetwork']
}

task pullFrontierImage(type: DockerPullImage) {
    repository = "quay.io/logbee/keyscore-frontier"
    tag = "development"
}

task pullAgentImage(type: DockerPullImage) {
    repository = "quay.io/logbee/keyscore-agent"
    tag = "development"
}

task pullManagerImage(type: DockerPullImage) {
    repository = "quay.io/logbee/keyscore-manager"
    tag = "development"
}

task createFrontierContainer(type: DockerCreateContainer) {
    dependsOn ['pullFrontierImage']
    containerName = "keyscore-frontier"
    targetImageId { pullFrontierImage.getImageId() }
    portBindings = ['2551:2551', '4711:4711']
    hostName = "keyscore-frontier"
    env = [
            'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
            'KEYSCORE_CLUSTER_SEED_NODE_HOST_2=keyscore-frontier-sleeping',
            'KEYSCORE_REMOTE_HOST=keyscore-frontier',
            'KEYSCORE_REMOTE_PORT=2551',
            'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0',
            'KEYSCORE_OPERATING_MODE=true'
    ]
    network = project.findProperty('containerNetwork') ?: 'host'
}

task createAgentContainer(type: DockerCreateContainer) {
    dependsOn ['pullAgentImage']
    containerName = "keyscore-agent"
    targetImageId { pullAgentImage.getImageId() }
    portBindings = ['3551:3551']
    hostName = "keyscore-agent"
    env = [
            'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
            'KEYSCORE_REMOTE_HOST=keyscore-agent',
            'KEYSCORE_REMOTE_PORT=0',
            'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0'
    ]
    binds = ["$buildDir/libs" : '/opt/keyscore-agent/extensions']
    network = project.findProperty('containerNetwork') ?: 'host'
}

task createManagerContainer(type: DockerCreateContainer) {
    dependsOn ['pullManagerImage']
    containerName = "keyscore-manager"
    targetImageId { pullManagerImage.getImageId() }
    portBindings = ['8080:80']
}

task startFrontierContainer(type: DockerStartContainer) {
    dependsOn = ['createFrontierContainer', ':setupDockerNetwork']
    targetContainerId { createFrontierContainer.containerName }
}

task startAgentContainer(type: DockerStartContainer) {
    dependsOn = ['createAgentContainer', ':setupDockerNetwork']
    targetContainerId { createAgentContainer.containerName }
}

task startManagerContainer(type: DockerStartContainer) {
    dependsOn = ['createManagerContainer', ':setupDockerNetwork']
    targetContainerId { createManagerContainer.containerName }
}

task stopFrontierContainer(type: DockerStopContainer) {
    targetContainerId { createFrontierContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createFrontierContainer.containerName + " has already been stopped")
        } else throw exception
    }
}

task stopAgentContainer(type: DockerStopContainer) {
    targetContainerId { createAgentContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createAgentContainer.containerName + " has already been stopped")
        } else throw exception
    }
}

task stopManagerContainer(type: DockerStopContainer) {
    targetContainerId { createManagerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createManagerContainer.containerName + " has already been stopped")
        } else throw exception
    }
}

task removeFrontierContainer(type: DockerRemoveContainer) {
    dependsOn stopFrontierContainer
    targetContainerId { createFrontierContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createFrontierContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task removeAgentContainer(type: DockerRemoveContainer) {
    dependsOn stopAgentContainer
    targetContainerId { createAgentContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createAgentContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task removeManagerContainer(type: DockerRemoveContainer) {
    dependsOn stopManagerContainer
    targetContainerId { createManagerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createManagerContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task runContainers(){
    dependsOn = [
            'startFrontierContainer',
            'startAgentContainer',
            'startManagerContainer'
    ]
    doLast {
        sleep(10000)
    }
}

task removeContainerNetwork(type: DockerRemoveNetwork) {
    networkId = project.properties['containerNetwork']
}

task stopContainers() {
    dependsOn = [
            'removeFrontierContainer',
            'removeAgentContainer',
            'removeManagerContainer'
    ]
    finalizedBy removeContainerNetwork
}

static def getBuildPropertyValue(String name) {
    def env = System.getenv()
    def envName = name.toUpperCase().replace('.', '_')

    if (env.containsKey(envName)) {
        return env.get(envName)
    }
    else {
        return System.getProperty(name)
    }
}

private def isPublicationRepositoryUrlConfigured() {
    return ext.publicationRepositoryUrl != null && !ext.publicationRepositoryUrl.empty
}

private def isPublicationRepositoryUserConfigured() {
    return ext.publicationRepositoryUser != null && !ext.publicationRepositoryUser.empty
}

private def isPublicationRepositoryPasswordConfigured() {
    return ext.publicationRepositoryPassword != null && !ext.publicationRepositoryPassword.empty
}
