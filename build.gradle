import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerInspectNetwork


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.2'
        classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

ext.dockerRegistryUser = getBuildPropertyValue("logbee.quay.user")
ext.dockerRegistryPassword = getBuildPropertyValue("logbee.quay.password")
ext.dockerRegistryUrl = 'https://quay.io/'
ext.dockerRegistryUserIsDefined = dockerRegistryUser == null || dockerRegistryUser.empty
ext.dockerRegistryPasswordIsDefined = dockerRegistryPassword == null || dockerRegistryPassword.empty

if (!dockerRegistryUserIsDefined) logger.warn("No registry credentials for: $dockerRegistryUrl - logbee.quay.user is not set.")
if (!dockerRegistryPasswordIsDefined) logger.warn("No registry credentials for: $dockerRegistryUrl - logbee.quay.password is not set.")

subprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

//    docker {
//        if (dockerRegistryUserIsDefined && dockerRegistryPasswordIsDefined) {
//            logger.info("Registry credentials set for: $dockerRegistryUrl")
//            registryCredentials {
//                url = dockerRegistryUrl
//                username = "$dockerRegistryUser"
//                password = "$dockerRegistryPassword"
//            }
//        }
//    }
}

task setupDockerNetwork(type: DockerInspectNetwork) {
    finalizedBy 'createContainerNetwork'
    networkId = project.properties['containerNetwork']
    setupDockerNetwork.ext.createNetwork = false
    onError { exception ->
        if (exception.message.contains('not found')) {
            println("Network " + project.properties['containerNetwork'] + " not found")
            setupDockerNetwork.ext.createNetwork = true
        } else throw exception
    }
}

task createContainerNetwork(type: DockerCreateNetwork) {
    onlyIf {
        setupDockerNetwork.createNetwork
    }
    networkId = project.properties['containerNetwork']
}

task foo {

}

static def getBuildPropertyValue(String name) {
    def env = System.getenv()
    def envName = name.toUpperCase().replace('.', '_')
    return env.containsKey(envName) ? env.get(envName) : System.getProperty(name)
}