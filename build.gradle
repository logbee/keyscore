import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerInspectNetwork


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.2'
        classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

ext.dockerRegestryUser = System.getProperty("logbee.quay.user")
ext.dockerRegestryPassword = System.getProperty("logbee.quay.password")
ext.dockerRegestryUrl = 'https://quay.io/'
ext.dockerRegestryUserIsDefined = dockerRegestryUser == null || dockerRegestryUser.empty
ext.dockerRegestryPasswordIsDefined = dockerRegestryPassword == null || dockerRegestryPassword.empty

if (!dockerRegestryUserIsDefined) logger.warn("No registry credentials for: $dockerRegestryUrl - logbee.quay.user is not set.")
if (!dockerRegestryPasswordIsDefined) logger.warn("No registry credentials for: $dockerRegestryUrl - logbee.quay.password is not set.")

subprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {
        if (dockerRegestryUserIsDefined && dockerRegestryPasswordIsDefined) {
            registryCredentials {
                url = "https://quay.io/"
                username = "$dockerRegestryUser"
                password = "$dockerRegestryPassword"
            }
        }
    }
}

task setupDockerNetwork(type: DockerInspectNetwork) {
    finalizedBy 'createContainerNetwork'
    networkId = project.properties['containerNetwork']
    setupDockerNetwork.ext.createNetwork = false
    onError { exception ->
        if (exception.message.contains('not found')) {
            println("Network " + project.properties['containerNetwork'] + " not found")
            setupDockerNetwork.ext.createNetwork = true
        } else throw exception
    }
}

task createContainerNetwork(type: DockerCreateNetwork) {
    onlyIf {
        setupDockerNetwork.createNetwork
    }
    networkId = project.properties['containerNetwork']
}
