import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerInspectNetwork


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.2'
        classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath "gradle.plugin.com.charlesahunt:scalapb-plugin:1.2.1"
    }
}

apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

ext.dockerRegistryUser = getBuildPropertyValue("logbee.quay.user")
ext.dockerRegistryPassword = getBuildPropertyValue("logbee.quay.password")
ext.dockerRegistryUrl = 'https://quay.io/'

if (!isDockerRegistryUserConfigured()) logger.warn("No registry credentials for: $dockerRegistryUrl - logbee.quay.user is not set.")
if (!isDockerRegistryPasswordConfigured()) logger.warn("No registry credentials for: $dockerRegistryUrl - logbee.quay.password is not set.")

subprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    docker {

        if (isDockerRegistryUserConfigured() && isDockerRegistryPasswordConfigured()) {
            logger.info("Registry credentials set for: $dockerRegistryUrl")
            registryCredentials {
                url = dockerRegistryUrl
                username = "$dockerRegistryUser"
                password = "$dockerRegistryPassword"
            }
        }
    }
}

task setupDockerNetwork(type: DockerInspectNetwork) {
    finalizedBy 'createContainerNetwork'
    networkId = project.properties['containerNetwork']
    setupDockerNetwork.ext.createNetwork = false
    onError { exception ->
        if (exception.message.contains('not found')) {
            println("Network " + project.properties['containerNetwork'] + " not found")
            setupDockerNetwork.ext.createNetwork = true
        } else throw exception
    }
}

task createContainerNetwork(type: DockerCreateNetwork) {
    onlyIf {
        setupDockerNetwork.createNetwork
    }
    networkId = project.properties['containerNetwork']
}

task foo {

}

private def isDockerRegistryUserConfigured() {
    return ext.dockerRegistryUser != null && !ext.dockerRegistryUser.empty
}

private def isDockerRegistryPasswordConfigured() {
    return ext.dockerRegistryPassword != null && !ext.dockerRegistryPassword.empty
}

static def getBuildPropertyValue(String name) {
    def env = System.getenv()
    def envName = name.toUpperCase().replace('.', '_')

    if (env.containsKey(envName)) {
        return env.get(envName)
    }
    else {
        return System.getProperty(name)
    }
}