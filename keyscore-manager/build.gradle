buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:2.2.1"
    }
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply plugin: 'com.github.node-gradle.node'

configurations {
    documentation
}

dependencies {
    documentation project(':doc')
}

ext {
    dockerImageName = "$dockerImageHost/$dockerImageNamespace/${project.name}"
    nodeVersion = '12.16.2'
}

node {
    version = nodeVersion
    download = true
}

npmInstall {
    args = ['--verbose', '--loglevel', 'verbose']
}

//Using ExecTask because nodeTask won't exit.
task ngBuild(type: Exec, dependsOn: npmInstall) {
  commandLine "node_modules/.bin/ng","build","--prod"
}

build {
  dependsOn = [ngBuild]
}

task manifest() {
    def manifestFile = new File(buildDir, "tmp/MANIFEST.MF")
    doLast {
        manifestFile.text =
        """|Implementation-Title: ${project.name},
           |Implementation-Version: $version,
           |Implementation-Revision: $revision,
           |Implementation-Revision-Date: $revisionDate,
           |Implementation-Build-Date: $buildDate,
           |Implementation-Vendor: 'logbee.io'
           |""".stripMargin()
    }
    outputs.file(manifestFile)
}

distributions {
    main {
        contents {
            into('web-content') {
              from(ngBuild)
              from(manifest)
              from(configurations.documentation) {
                  into 'doc'
              }
              from('build/ng')
            }
        }
    }
}

task serve(type: NpmTask, dependsOn: npmInstall) {
    args=['run','start']
}


task storybook(type: NpmTask) {
    args = ['run', 'storybook']
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/Dockerfile")
    from 'quay.io/logbee/nginx:v1.13.7'
    instruction { 'COPY conf/nginx.conf /etc/nginx/nginx.conf' }
    instruction { 'COPY docker/docker-entrypoint.sh /docker-entrypoint.sh' }
    instruction { 'COPY build/install/keyscore-manager/web-content /usr/share/nginx/html/' }
    instruction { 'COPY build/tmp/MANIFEST.MF /usr/share/nginx/html/' }
    instruction { "CMD /docker-entrypoint.sh" }
    instruction { 'EXPOSE 80' }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [createDockerfile, installDist]) {
    inputDir = projectDir
    dockerFile = createDockerfile.destFile
    tag = "$dockerImageName:$version"
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = project.name
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8080:80']
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.containerName }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }
}

task removeDockerContainer(type: DockerRemoveContainer) {
    dependsOn stopDockerContainer
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    imageName = dockerImageName
    tag = version
}

clean {
    delete 'build'
}

task cleanAll(type: Delete, dependsOn: clean) {
    delete 'node_modules', 'package-lock.json'
}

task npmReset(type: NpmTask,dependsOn:cleanAll ){
  args= ['install']
}
