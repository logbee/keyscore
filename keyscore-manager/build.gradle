buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:1.3.0"
    }
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply plugin: 'com.github.node-gradle.node'

ext {
    dockerImageName = "$dockerImageHost/$dockerImageNamespace/${project.name}"
    nodeVersion = '8.9.4'
}

node {
    version = nodeVersion
    download = true
}

npmInstall {
    args = ['--verbose', '--loglevel', 'verbose']
}

subprojects {
    project.apply plugin: 'com.github.node-gradle.node'
    
    node {
        version = nodeVersion
        download = true
    }

    npmInstall {
        args = ['--verbose', '--loglevel', 'verbose']
    }

    task clean(type: Delete) {
        delete 'build'
    }

    task cleanAll(type: Delete, dependsOn: clean) {
        delete 'node_modules', 'package-lock.json'
    }
}

task webpack(type: NodeTask, dependsOn: npmInstall) {
    script = file('node_modules/.bin/webpack')
    inputs.files([
        file('node_modules/.bin/webpack'),
        files("src")
    ])
}

task serve(type: NodeTask, dependsOn: npmInstall) {
    script = file('node_modules/.bin/webpack-dev-server')
}

task storybook(type: NpmTask, dependsOn: npmInstall) {
    args = ['run','storybook']
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/Dockerfile")
    from 'quay.io/logbee/nginx:v1.13.7'
    instruction { 'COPY public/ build/webpack/ /usr/share/nginx/html/' }
    instruction { 'COPY conf/nginx.conf /etc/nginx/nginx.conf' }
    instruction { 'COPY conf/application.conf /usr/share/nginx/html/' }
    instruction { 'COPY build/resources/keyscore.light.svg /usr/share/nginx/html/' }
    instruction { "CMD nginx -g 'daemon off;'" }
    instruction { 'EXPOSE 80' }
}

task copyResources(type: Copy) {
    from file('../media/svg/light/keyscore.light.svg')
    into "$buildDir/resources/"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [createDockerfile, copyResources, webpack]) {
    inputDir = projectDir
    dockerFile = createDockerfile.destFile
    tag = "$dockerImageName:$version"
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = project.name
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8080:80']
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.containerName }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
}

task removeDockerContainer(type: DockerRemoveContainer) {
    dependsOn stopDockerContainer
    targetContainerId { createDockerContainer.containerName }
}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    imageName = dockerImageName
    tag = version
}

task build(dependsOn: webpack) {
}

task check(dependsOn: build) {

}

task clean(type: Delete) {
    delete 'build'
}

task cleanAll(type: Delete, dependsOn: clean) {
    delete 'node_modules'
}

task cleanNode(type: Delete) {
    delete 'node_modules'
}
