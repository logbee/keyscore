syntax = "proto3";

import "scalapb/scalapb.proto";
import "io/logbee/keyscore/data.proto";
import "io/logbee/keyscore/localization.proto";
import "io/logbee/keyscore/metrics.proto";

option (scalapb.options) = {
    package_name: "io.logbee.keyscore.model.descriptor"
    flat_package: true
};

// tag::ParameterRef[]
message ParameterRef {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.descriptor.ParameterRefCompanion";
    string id = 1;
}
// end::ParameterRef[]

// tag::ParameterInfo[]
message ParameterInfo {
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    Importance importance = 8 [(scalapb.field).no_box = true];
}
// end::ParameterInfo[]

message ParameterDescriptor {
    oneof sealed_value {
        BooleanParameterDescriptor booleanParameter = 1;
        NumberParameterDescriptor numberParameter = 2;
        DecimalParameterDescriptor decimalParameter = 3;
        TextParameterDescriptor textParameter = 4;
        ExpressionParameterDescriptor expressionParameter = 5;
        FieldNameParameterDescriptor fieldNameParameter = 6;
        FieldNamePatternParameterDescriptor fieldNamePatternParameter = 7;
        FieldParameterDescriptor fieldParameter = 8;
        ChoiceParameterDescriptor choiceParameter = 9;
        ParameterGroupDescriptor conditionalParameter = 10;
        TextListParameterDescriptor textListParameter = 11;
        FieldNameListParameterDescriptor fieldNameListParameter = 12;
        FieldListParameterDescriptor fieldListParameter = 13;
        FieldDirectiveSequenceParameterDescriptor fieldDirectiveSequenceParameter = 14;
        PasswordParameterDescriptor passwordParameter = 15;
    }
}

// tag::BooleanParameterDescriptor[]
message BooleanParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    bool defaultValue = 5;
    bool mandatory = 4;
}
// end::BooleanParameterDescriptor[]

// tag::TextParameterDescriptor[]
message TextParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    StringValidator validator = 4;
    bool mandatory = 5;
}
// end::TextParameterDescriptor[]

// tag::PasswordParameterDescriptor[]
message PasswordParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    StringValidator validator = 4;
    sint32 minLength = 5;
    sint32 maxLength = 6;
    bool mandatory = 7;
}
// end::PasswordParameterDescriptor[]

// tag::ExpressionParameterDescriptor[]
message ExpressionParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    repeated Choice choices = 3;
    string defaultValue = 4;
    bool mandatory = 5;
}
// end::ExpressionParameterDescriptor[]

// tag::NumberParameterDescriptor[]
message NumberParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    sint64 defaultValue = 5;
    NumberRange range = 6;
    bool mandatory = 4;
}
// end::NumberParameterDescriptor[]

// tag::DecimalParameterDescriptor[]
message DecimalParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    sint64 defaultValue = 5;
    DecimalRange range = 6;
    uint32 decimals = 7;
    bool mandatory = 4;
}
// end::DecimalParameterDescriptor[]

// tag::FieldNameParameterDescriptor[]
message FieldNameParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    FieldNameHint hint = 4;
    StringValidator validator = 5;
    bool mandatory = 6;
}
// end::FieldNameParameterDescriptor[]

// tag::FieldNameParameterDescriptor[]
message FieldNamePatternParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    FieldNameHint hint = 4;
    repeated PatternType supports = 5;
    bool mandatory = 6;
    enum PatternType {
        None = 0;
        RegEx = 1;
        Glob = 2;
    }
}
// end::FieldNameParameterDescriptor[]

// tag::FieldParameterDescriptor[]
message FieldParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultName = 3;
    FieldNameHint hint = 4;
    StringValidator nameValidator = 5;
    FieldValueType fieldValueType = 6;
    bool mandatory = 7;
}
// end::FieldParameterDescriptor[]

// tag::TextListParameterDescriptor[]
message TextListParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    TextParameterDescriptor descriptor = 3;
    uint32 min = 4;
    uint32 max = 5;
}
// end::TextListParameterDescriptor[]

// tag::FieldNameListParameterDescriptor[]
message FieldNameListParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    FieldNameParameterDescriptor descriptor = 3;
    uint32 min = 4;
    uint32 max = 5;
}
// end::FieldNameListParameterDescriptor[]

// tag::FieldListParameterDescriptor[]
message FieldListParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    FieldParameterDescriptor descriptor = 3;
    uint32 min = 4;
    uint32 max = 5;
}
// end::FieldListParameterDescriptor[]

// tag::ChoiceParameterDescriptor[]
message ChoiceParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    uint32 min = 3;
    uint32 max = 4;
    repeated Choice choices = 5;
}
// end::ChoiceParameterDescriptor[]

// tag::Choice[]
message Choice {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    Importance importance = 4 [(scalapb.field).no_box = true];
}
// end::Choice[]

// tag::ParameterGroupDescriptor[]
message ParameterGroupDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    ParameterGroupCondition condition = 3;
    repeated ParameterDescriptor parameters = 4;
}
// end::ParameterGroupDescriptor[]

// tag::ParameterGroupCondition[]
message ParameterGroupCondition {
    oneof sealed_value {
        BooleanParameterCondition booleanParameterCondition = 1;
    }
}
// end::ParameterGroupCondition[]

// tag::BooleanParameterCondition[]
message BooleanParameterCondition {
    ParameterRef parameter = 1 [(scalapb.field).no_box = true];
    bool negate = 2;
}
// end::BooleanParameterCondition[]

// tag::FieldDirectiveSequenceParameterDescriptor[]
message FieldDirectiveSequenceParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    repeated FieldValueType fieldTypes = 3;
    repeated ParameterDescriptor parameters = 4;
    repeated FieldDirectiveDescriptor directives = 5;
    uint32 minSequences = 6;
    uint32 maxSequences = 7;
}
// end::FieldDirectiveSequenceParameterDescriptor[]

// tag::DirectiveRef[]
message DirectiveRef {
    string uuid = 1 [(scalapb.field).no_box = true];
}
// end::DirectiveRef[]

// tag::DirectiveInstanceRef[]
message DirectiveInstanceRef {
    string uuid = 1 [(scalapb.field).no_box = true];
}
// end::DirectiveInstanceRef[]

// tag::FieldDirectiveDescriptor[]
message FieldDirectiveDescriptor {
    DirectiveRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    repeated ParameterDescriptor parameters = 4;
    Icon icon = 13;
}
// end::FieldDirectiveDescriptor[]

message StringValidator {
    string expression = 1;
    TextRef description = 2;
}

enum FieldNameHint {
    AnyField = 0;
    PresentField = 1;
    AbsentField = 2;
}

enum FieldNameValueTypeHint {
    TextValueField = 0;
    NumberValueField = 1;
    DecimalValueField= 2;
    BooleanValueField = 3;
    TimestampValueField = 4;
    DurationValueField = 5;
}

// tag::ExpressionType[]
enum ExpressionType {
    RegEx = 0;
    Grok = 2;
    Glob = 3;
    JSONPath = 4;
}
// end::ExpressionType[]

message NumberRange {
    sint32 step = 1;
    sint64 start = 2;
    sint64 end = 3;
}

message DecimalRange {
    double step = 1;
    double start = 2;
    double end = 3;
}
