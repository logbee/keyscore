syntax = "proto3";

import "scalapb/scalapb.proto";
import "io/logbee/keyscore/data.proto";
import "io/logbee/keyscore/localization.proto";
import "io/logbee/keyscore/metrics.proto";
import "io/logbee/keyscore/notifications.proto";
import "io/logbee/keyscore/parameter-descriptor.proto";

option (scalapb.options) = {
    package_name: "io.logbee.keyscore.model.descriptor"
    flat_package: true
};

message DescriptorRef {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.descriptor.DescriptorRefCompanion";
    string uuid = 1 [(scalapb.field).no_box = true];
}

// tag::Descriptor[]
message Descriptor {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.descriptor.DescriptorCompanion";
    DescriptorRef ref = 1 [(scalapb.field).no_box = true];
    MetaData metadata = 2;
    SealedDescriptor describes = 3;
    Localization localization = 15;
}
// end::Descriptor[]

message SealedDescriptor {
    oneof sealed_value {
        FilterDescriptor filter = 1;
        SourceDescriptor source = 2;
        SinkDescriptor sink = 3;
        BranchDescriptor branch = 4;
        MergeDescriptor merge = 5;
    }
}

// tag::SourceDescriptor[]
message SourceDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    repeated Category categories = 4;
    repeated ParameterDescriptor parameters = 8;
    repeated MetricDescriptor metrics = 9;
    repeated NotificationDescriptor notifications = 10;
    OutputDescriptor out = 11;
    Icon icon = 13;
    Maturity maturity = 14;
}
// end::SourceDescriptor[]

// tag::SinkDescriptor[]
message SinkDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    repeated Category categories = 4;
    repeated ParameterDescriptor parameters = 8;
    repeated MetricDescriptor metrics = 9;
    repeated NotificationDescriptor notifications = 10;
    InputDescriptor in = 11;
    Icon icon = 13;
    Maturity maturity = 14;
}
// end::SinkDescriptor[]

// tag::FilterDescriptor[]
message FilterDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    repeated Category categories = 4;
    repeated ParameterDescriptor parameters = 8;
    repeated MetricDescriptor metrics = 9;
    repeated NotificationDescriptor notifications = 10;
    InputDescriptor in = 11;
    OutputDescriptor out = 12;
    Icon icon = 13;
    Maturity maturity = 14;
}
// end::FilterDescriptor[]

// tag::BranchDescriptor[]
message BranchDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    repeated Category categories = 4;
    repeated ParameterDescriptor parameters = 8;
    repeated MetricDescriptor metrics = 9;
    repeated NotificationDescriptor notifications = 10;
    InputDescriptor in = 11;
    OutputDescriptor left = 12;
    OutputDescriptor right = 13;
    Icon icon = 14;
    Maturity maturity = 15;
}
// end::BranchDescriptor[]

// tag::MergeDescriptor[]
message MergeDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    repeated Category categories = 4;
    repeated ParameterDescriptor parameters = 8;
    repeated MetricDescriptor metrics = 9;
    repeated NotificationDescriptor notifications = 10;
    InputDescriptor left = 11;
    InputDescriptor right = 12;
    OutputDescriptor out = 13;
    Icon icon = 14;
    Maturity maturity = 15;
}
// end::MergeDescriptor[]

// tag::Category[]
message Category {
    string name = 1;
    TextRef displayName = 2;
}
// end::Category[]

// tag::Maturity[]
enum Maturity {
    None = 0;
    Experimental = 1;
    Development = 2;
    Stable = 3;
    Official = 4;
    Deprecated = 5;
}
// end::Maturity[]

message InputDescriptor {
    string name = 1;
}

message OutputDescriptor {
    string name = 1;
}