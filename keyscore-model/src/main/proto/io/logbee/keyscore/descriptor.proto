syntax = "proto3";

import "scalapb/scalapb.proto";
import "localization.proto";
import "model.proto";

option (scalapb.options) = {
    package_name: "io.logbee.keyscore.model"
    flat_package: true
};

message Descriptor {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.DescriptorCompanion";
    string id = 1;
    Describe describe = 2;
    Localization localization = 15;
}

message Describe {
    oneof sealed_value {
        FilterDescriptor filter = 1;
    }
}

message FilterDescriptor {
    string name = 1;
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
    TextRef category = 4;
    repeated ParameterDescriptor parameters = 8;
}

message ParameterRef {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.ParameterRefCompanion";
    string id = 1;
}

message ParameterInfo {
    TextRef displayName = 2 [(scalapb.field).no_box = true];
    TextRef description = 3 [(scalapb.field).no_box = true];
}

message ParameterDescriptor {
    oneof sealed_value {
        BooleanParameterDescriptor booleanParameter = 1;
        NumberParameterDescriptor numberParameter = 2;
        DecimalParameterDescriptor decimalParameter = 3;
        TextParameterDescriptor textParameter = 4;
        PatternParameterDescriptor patternParameter = 5;
        FieldNameParameterDescriptor fieldNameParameter = 6;
        FieldParameterDescriptor fieldParameter = 7;
        ListParameterDescriptor listParameter = 8;
        ChoiceParameterDescriptor choiceParameter = 9;
        ConditionalParameterDescriptor conditionalParameter = 10;
    }
}

message TextParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    StringValidator validator = 4;
    bool mandatory = 5;
}

message PatternParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    PatternType patternType = 3;
    string defaultValue = 4;
    bool mandatory = 5;
}

message BooleanParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    bool defaultValue = 5;
    bool mandatory = 4;
}

message NumberParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    sint64 defaultValue = 5;
    NumberRange range = 6;
    bool mandatory = 4;
}

message DecimalParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    sint64 defaultValue = 5;
    DecimalRange range = 6;
    uint32 decimals = 7;
    bool mandatory = 4;
}

message FieldNameParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultValue = 3;
    FieldNameHint hint = 4;
    StringValidator validator = 5;
    bool mandatory = 6;
}

message FieldParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    string defaultName = 3;
    FieldNameHint hint = 4;
    StringValidator nameValidator = 5;
    FieldValueType fieldValueType = 6;
    bool mandatory = 7;
}

enum FieldNameHint {
    AnyField = 0;
    PresentField = 1;
    AbsentField = 2;
}

message ListParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    ParameterDescriptor kind = 3;
    uint32 min = 4;
    uint32 max = 5;
}

message ChoiceParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    uint32 min = 3;
    uint32 max = 4;
    repeated Choice Choices = 5;
}

message Choice {
    string name = 1;
    TextRef displayName = 2;
    TextRef description = 3;
}

message ConditionalParameterDescriptor {
    ParameterRef ref = 1 [(scalapb.field).no_box = true];
    ParameterInfo info = 2;
    ConditionalParameterCondition condition = 3 [(scalapb.field).no_box = true];
    repeated ParameterDescriptor parameters = 4;
}

message ConditionalParameterCondition {
    oneof sealed_value {
        BooleanParameterCondition booleanParameterCondition = 1;
    }
}

message BooleanParameterCondition {
    ParameterRef parameter = 2 [(scalapb.field).no_box = true];
    bool negate = 3;
}

message StringValidator {
    string pattern = 1;
    PatternType patternType = 2;
    TextRef description = 3;
}

enum PatternType {
    RegEx = 0;
    Grok = 2;
    Glob = 3;
}

message NumberRange {
    sint32 step = 1;
    sint64 start = 2;
    sint64 end = 3;
}

message DecimalRange {
    double step = 1;
    double start = 2;
    double end = 3;
}
