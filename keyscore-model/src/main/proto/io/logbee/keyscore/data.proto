syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
    package_name: "io.logbee.keyscore.model.data"
    flat_package: true
};

message Dataset {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.data.DatasetCompanion";
    MetaData metadata = 1 [(scalapb.field).no_box = true];
    repeated Record records = 2 [(scalapb.field).collection_type="collection.immutable.List"];
}

message MetaData {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.data.MetaDataCompanion";
    repeated Label labels = 1 [(scalapb.field).collection_type="collection.immutable.Set"];
}

message Label {
    string name = 1;
    Value value = 2;
}

message Record {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.data.RecordCompanion";
    repeated Field fields = 2 [(scalapb.field).collection_type="collection.immutable.List"];
}

message Field {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.FieldConversions";
    string name = 1;
    Value value = 2;
}

message Value {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.ValueConversion";
    oneof sealed_value {
        BooleanValue boolean = 1;
        NumberValue number = 2;
        DecimalValue decimal = 3;
        TextValue text = 4;
        TimestampValue timestamp = 5;
        DurationValue duration = 6;
        HealthValue health = 7;
    }
}

message BooleanValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.BooleanValueConversion";
    bool value = 1;
}

message NumberValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.NumberValueConversion";
    sint64 value = 1;
}

message DecimalValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.DecimalValueConversion";
    double value = 1;
}

message TextValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.TextValueConversion";
    string value = 1;
}

message TimestampValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.TimestampValueConversion";
    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;
    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}

message DurationValue {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.conversion.DurationValueConversion";
    int64 seconds = 1;
    int32 nanos = 2;
}

message HealthValue {
    Health value = 1;
}

enum Health {
    Gray = 0;
    Green = 1;
    Yellow = 2;
    Red = 3;
}

enum FieldValueType {
    Unknown = 0;
    Boolean = 1;
    Number = 2;
    Decimal = 3;
    Text = 4;
    Timestamp = 5;
    Duration = 6;
}

enum Importance {
    Undefined = 0;
    Low = 1;
    Lower = 2;
    Medium = 3;
    Higher = 4;
    High = 5;
}

message Icon {
    option (scalapb.message).companion_extends = "io.logbee.keyscore.model.data.IconLoader";
    string data = 1;
    IconFormat format = 2;
    IconEncoding encoding = 3;
}

enum IconFormat {
    SVG = 0;
}

enum IconEncoding {
    RAW = 0;
    Base64 = 1;
}
