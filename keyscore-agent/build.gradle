import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply plugin: 'scala'
apply from: rootProject.file('dependencies.gradle')

repositories {
    mavenCentral()
}

project.ext {
    distributionDir = "$buildDir/distribution"
}

configurations {
    testOutput
}

dependencies {

    compile project(':keyscore-commons')
    compile project(':keyscore-model')

    compile project(':keyscore-pipeline:keyscore-pipeline-api')

    compile dependency.scala_lang
    compile dependency.akka_actor
    compile dependency.akka_persistence
    compile dependency.akka_stream
    compile dependency.akka_slf4j
    compile dependency.akka_http
    compile dependency.akka_http_json
    compile dependency.akka_cluster

    runtime project(':keyscore-pipeline:keyscore-pipeline-contrib')

    runtime dependency.logback

    testCompile project(':keyscore-test-fixtures')
    testCompile project(':keyscore-pipeline:keyscore-pipeline-contrib')
    testCompile project(':keyscore-frontier')

    testCompile dependency.scala_test
    testCompile dependency.akka_testkit

    testCompile dependency.junit

    testOutput sourceSets.main.output
    testOutput sourceSets.test.output
}

test {
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat "full"
    }
}

jar {
    manifest.attributes([
            'Main-Class'            : mainClass,
            'Implementation-Title'  : project.name,
            'Implementation-Version': version,
            'Class-Path'            : (configurations.runtime + configurations.compile).collect {
                "libs/" + it.getName()
            }.join(' ')
    ])
}

task buildDistribution(type: Copy, dependsOn: [jar]) {
    into project.distributionDir
    from('src/launcher/keyscore-agent')
    from(jar.outputs) {
        rename("${project.name}-${version}.jar", "${project.name}.jar")
    }
    from(configurations.runtime) {
        into 'libs'
    }

}

task buildDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/Dockerfile")
    from 'quay.io/logbee/openjdk-8-jdk-alpine'
    instruction { "COPY build/distribution/ /opt/keyscore-agent/" }
    instruction { "CMD /opt/keyscore-agent/keyscore-agent" }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [buildDistribution, buildDockerfile]) {
    inputDir = projectDir
    dockerFile = buildDockerfile.destFile
    tag = "$dockerImageName:$version"
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = project.name
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['3551:3551']
    hostName = project.name
    env = [
        'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
        'KEYSCORE_REMOTE_HOST=keyscore-agent',
        'KEYSCORE_REMOTE_PORT=0',
        'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0'
    ]
    network = project.findProperty('containerNetwork') ?: 'host'
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn = ['createDockerContainer',':setupDockerNetwork']
    targetContainerId { createDockerContainer.containerName }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeDockerContainer(type: DockerRemoveContainer) {
    dependsOn stopDockerContainer
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task stopDockerContainerOnStartup(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeDockerContainerOnStartup(type: DockerRemoveContainer) {
    dependsOn stopDockerContainerOnStartup
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    imageName = dockerImageName
    tag = version
}
