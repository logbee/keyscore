import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.inet.gradle.setup.unix.deb.Deb
import de.undercouch.gradle.tasks.download.Download
import de.undercouch.gradle.tasks.download.Verify

apply from: rootProject.file('dependencies.gradle')

repositories {
    mavenCentral()
}

project.ext {
    distributionDir = "$buildDir/distribution"
    dockerImageName = "$dockerImageHost/$dockerImageNamespace/${project.name}"
}

configurations {
    testOutput
}

dependencies {

    compile project(':keyscore-commons')
    compile project(':keyscore-model')

    compile project(':keyscore-pipeline:keyscore-pipeline-api')

    compile project(':keyscore-agent:keyscore-agent-runtimes-api')
    compile project(':keyscore-agent:keyscore-agent-runtimes-jvm')

    compile dependency.scala_lang
    compile dependency.akka_actor
    compile dependency.akka_persistence
    compile dependency.akka_stream
    compile dependency.akka_slf4j
    compile dependency.akka_http
    compile dependency.akka_http_json
    compile dependency.akka_cluster

    runtime project(':keyscore-commons:keyscore-commons-logging')
    runtime project(':keyscore-pipeline:keyscore-pipeline-commons')
    runtime project(':keyscore-pipeline:keyscore-pipeline-contrib')

    runtime dependency.logback

    testCompile project(':keyscore-test-fixtures')
    testCompile project(':keyscore-pipeline:keyscore-pipeline-contrib')
    testCompile project(':keyscore-frontier')

    testCompile "com.dimafeng:testcontainers-scala_2.13:0.30.0"

    testCompile dependency.scala_test
    testCompile dependency.akka_testkit

    testCompile dependency.junit

    testOutput sourceSets.main.output
    testOutput sourceSets.test.output
}

apply plugin: "de.inetsoftware.setupbuilder"
apply plugin: "de.undercouch.download"

jar {
    exclude('**/.keep')
    manifest.attributes([
        'Main-Class'                   : mainClass,
        'Implementation-Title'         : project.name,
        'Implementation-Version'       : version,
        'Implementation-Revision'      : revision,
        'Implementation-Revision-Date' : revisionDate,
        'Implementation-Build-Date'    : buildDate,
        'Implementation-Vendor'        : 'logbee.io',
        'Class-Path'                   : (configurations.runtime + configurations.compile).collect { "libs/" + it.getName() }.join(' ')
    ])
}

distributions {
    main {
        contents {
            from('src/launcher/keyscore-agent')
            from(jar.outputs) {
                rename("${project.name}-${version}.jar", "${project.name}.jar")
            }
            from(configurations.runtime) {
                into 'libs'
            }
        }
    }
}

task buildDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/Dockerfile")
    from 'quay.io/logbee/openjdk-8-jre:8u222'
    instruction { "COPY build/install/ /opt/" }
    instruction { "CMD /opt/keyscore-agent/keyscore-agent" }
}

task buildRaspbianDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/RaspbianDockerfile")
    from 'balenalib/raspberrypi3-alpine-openjdk' //TODO alpine?
    instruction { "RUN [ \"cross-build-start\" ]"}
    instruction { "COPY build/install/ /opt/" }
    instruction { "CMD /opt/keyscore-agent/keyscore-agent" }
    instruction { "RUN [ \"cross-build-end\" ]"}
}

["", "Raspbian"].each { arch ->
    def dockerfileTask = tasks["build${arch}Dockerfile"]
    task "build${arch}DockerImage"(type: DockerBuildImage, dependsOn: [installDist, dockerfileTask]) {
        inputDir = projectDir
        dockerFile = dockerfileTask.destFile
        if (arch.isEmpty()) {
            tag = "$dockerImageName:$version"
        }
        else {
            tag = "$dockerImageName:${arch.toLowerCase()}-$version"
        }
    }
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = project.name
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['3551:3551']
    hostName = project.name
    env = [
        'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
        'KEYSCORE_REMOTE_HOST=keyscore-agent',
        'KEYSCORE_REMOTE_PORT=0',
        'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0'
    ]
    network = project.findProperty('containerNetwork') ?: 'host'
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn = ['createDockerContainer',':setupDockerNetwork']
    targetContainerId { createDockerContainer.containerName }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeDockerContainer(type: DockerRemoveContainer) {
    dependsOn stopDockerContainer
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task stopDockerContainerOnStartup(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeDockerContainerOnStartup(type: DockerRemoveContainer) {
    dependsOn stopDockerContainerOnStartup
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    imageName = dockerImageName
    tag = version
}

task downloadJDK(type: Download) {
    src 'https://cdn.azul.com/zulu/bin/zulu8.40.0.25-ca-jdk8.0.222-linux_x64.tar.gz'
    dest new File(project.gradle.gradleUserHomeDir, 'jdk8.tar.gz')
    overwrite false
}

task verifyJDK(type: Verify, dependsOn: downloadJDK) {
    src downloadJDK.dest
    algorithm 'SHA-256'
    checksum '7dcbd34462cdceadc323818d08dc0b28a369fcc7408ff0acf55720758036839b'
}

task unpackJDK(dependsOn: verifyJDK) {
    doLast {
        copy {
            from tarTree(downloadJDK.dest)
            into project.gradle.gradleUserHomeDir
        }
        copy {
            from("$project.gradle.gradleUserHomeDir/zulu8.40.0.25-ca-jdk8.0.222-linux_x64")
            into("$project.gradle.gradleUserHomeDir/jdk/jdk8")
        }
        delete "$project.gradle.gradleUserHomeDir/zulu8.40.0.25-ca-jdk8.0.222-linux_x64"
    }
}

task createDebianPackage(type: Deb) {
    setupBuilder {
        vendor          = "logbee"
        copyright       = "Copyright 2019 logbee"
        description     = "The mighty Agent of Keyscore"

        version         = "0.3.0-alpha.7"
        application     = "Keyscore Agent"
        appIdentifier   = "keyscore-agent"

        mainClass       = "com.logbee.keyscore.agent.app.AgentApplication"

        mainJar         = "keyscore-agent-0.3.0-alpha.7.jar"

        from(project.tasks['installDist'])
        from("$project.gradle.gradleUserHomeDir/jdk")
        from('src/launcher/debian_post_install.sh')
        from('src/scripts/ks_agent.service')

        installationRoot = "/usr/share/keyscore/keyscore-agent"

        homepage = "https://github.com/logbee/keyscore"

        postinst = '/usr/share/keyscore/keyscore-agent/debian_post_install.sh'
    }
}