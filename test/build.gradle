buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3' }
}

apply plugin: 'scala'
apply plugin: 'org.junit.platform.gradle.plugin'
apply from: rootProject.file('dependencies.gradle')

import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork

repositories {
    mavenCentral()
}

dependencies {
    compile dependency.scala_lang
    compile dependency.slf4j

    testCompile dependency.scala_test
    testCompile dependency.citrus
    testCompile dependency.junit
    testRuntime dependency.junitRuntime
}

if (project.hasProperty('containerNetwork')) {

    task createContainerNetwork(type: DockerCreateNetwork) {
        networkId = project.containerNetwork
    }

    task removeContainerNetwork(type: DockerRemoveNetwork) {
        networkId = project.containerNetwork
    }
}

task startContainers() {
    dependsOn = [
        ':keyscore-frontier:startDockerContainer',
        ':keyscore-agent:startDockerContainer',
        'elasticsearch:startContainer',
        'kafka:startContainer'
    ]
    doLast {
        sleep(10000)
    }
}

task stopContainers() {
    dependsOn = [
        ':keyscore-frontier:removeDockerContainer',
        ':keyscore-agent:removeDockerContainer',
        'elasticsearch:removeContainer',
        'kafka:removeContainer'
    ]
}

junitPlatformTest {
    dependsOn startContainers
    finalizedBy stopContainers
    outputs.upToDateWhen { false }
}

afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    junitPlatformTestTask.systemProperty 'citrus.html.report.directory', "$buildDir/test-results/citrus-reports"
}

