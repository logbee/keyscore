import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerExecContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

task pullImage(type: DockerPullImage) {
    repository = "quay.io/logbee/docker-kafka"
    tag = "latest"
}

task createContainer(type: DockerCreateContainer) {
    dependsOn = ['pullImage']
    containerName = 'keyscore-kafka'
    targetImageId { pullImage.getImageId() }
    portBindings = ['9092:9092', '2181:2181']
    hostName = 'keyscore-kafka'
    network = project.findProperty('containerNetwork') ?: 'host'
}

task startContainer(type: DockerStartContainer) {
    dependsOn = ['createContainer', '::setupDockerNetwork']
    targetContainerId { createContainer.containerName }
}


task createKafkaTopics(type: DockerExecContainer) {
    dependsOn startContainer
    targetContainerId { createContainer.containerName }
    cmd = ["/usr/bin/create-topics.sh", "TopicA,TopicB,TopicC"]
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId { createContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId { createContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task stopContainerOnStartup(type: DockerStopContainer) {
    targetContainerId { createContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeContainerOnStartup(type: DockerRemoveContainer) {
    dependsOn stopContainerOnStartup
    targetContainerId { createContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createContainer.containerName + " has already been removed")
        } else throw exception
    }
}
