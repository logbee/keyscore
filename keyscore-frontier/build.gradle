import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import io.logbee.gradle.scalapb.ScalaPBPlugin

apply plugin: ScalaPBPlugin

apply from: rootProject.file('dependencies.gradle')

evaluationDependsOn ':keyscore-commons'

repositories {
    mavenCentral()
}

project.ext {
    distributionDir = "$buildDir/distribution"
    dockerImageName = "$dockerImageHost/$dockerImageNamespace/${project.name}"
}

dependencies {

    compile project(':keyscore-commons')
    compile project(':keyscore-model')

    compile dependency.scala_lang
    compile dependency.akka_actor
    compile dependency.akka_persistence
    compile dependency.akka_stream
    compile dependency.akka_slf4j
    compile dependency.akka_http
    compile dependency.akka_http_json
    compile dependency.akka_http_cors
    compile dependency.akka_persistence
    compile dependency.akka_cluster
    compile dependency.keycloak

    runtime dependency.logback

    testCompile project(':keyscore-test-fixtures')

    testCompile dependency.scala_test
    testCompile dependency.akka_testkit

    testCompile dependency.junit
}

test {
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat "full"
    }
}

jar {
    exclude('**/.keep')
    manifest.attributes([
        'Main-Class'                   : mainClass,
        'Implementation-Title'         : project.name,
        'Implementation-Version'       : version,
        'Implementation-Revision'      : revision,
        'Implementation-Revision-Date' : revisionDate,
        'Implementation-Build-Date'    : buildDate,
        'Implementation-Vendor'        : 'logbee.io',
        'Class-Path'                   : (configurations.runtime + configurations.compile).collect { "libs/" + it.getName() }.join(' ')
    ])
}

generateScalaPB {
    dependsOn project(':keyscore-commons').tasks['jar']
}

distributions {
    main {
        contents {
            from('src/launcher/keyscore-frontier')
            from(jar.outputs) {
                rename("${project.name}-${version}.jar", "${project.name}.jar")
            }
            from(configurations.runtime) {
                into 'libs'
            }
        }
    }
}

task buildDockerfile(type: Dockerfile) {
    destFile = project.file("$buildDir/tmp/Dockerfile")
    from 'quay.io/logbee/openjdk-8-jre:8u222'
    instruction { "COPY build/install/ /opt/" }
    instruction { "CMD /opt/keyscore-frontier/keyscore-frontier" }
    instruction { 'EXPOSE 4711' }
}

task buildDockerImage(type: DockerBuildImage, dependsOn: [installDist, buildDockerfile]) {
    inputDir = projectDir
    dockerFile = buildDockerfile.destFile
    tag = "$dockerImageName:$version"
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = "keyscore-frontier"
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['2551:2551', '4711:4711']
    hostName = project.name
    env = [
            'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
            'KEYSCORE_CLUSTER_SEED_NODE_HOST_2=keyscore-frontier-sleeping',
            'KEYSCORE_REMOTE_HOST=keyscore-frontier',
            'KEYSCORE_REMOTE_PORT=2551',
            'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0',
            'KEYSCORE_OPERATING_MODE=true'
    ]
    network = project.findProperty('containerNetwork') ?: 'host'
}

task createSleepingContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = "keyscore-frontier-sleeping"
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['2552:2552']
    hostName = "keyscore-frontier-sleeping"
    network = project.findProperty('containerNetwork') ?: 'host'
    env = [
            'KEYSCORE_CLUSTER_SEED_NODE_HOST=keyscore-frontier',
            'KEYSCORE_CLUSTER_SEED_NODE_HOST_2=keyscore-frontier-sleeping',
            'KEYSCORE_REMOTE_HOST=keyscore-frontier-sleeping',
            'KEYSCORE_REMOTE_PORT=2552',
            'KEYSCORE_REMOTE_BIND_HOST=0.0.0.0',
            'KEYSCORE_REMOTE_BIND_PORT=2552',
            'KEYSCORE_OPERATING_MODE=false'
    ]
}

task startDockerContainer(type: DockerStartContainer) {

    dependsOn = ['createDockerContainer', ':setupDockerNetwork']
    targetContainerId { createDockerContainer.containerName }
}

task startSleepingContainer(type: DockerStartContainer) {

    dependsOn = ['createSleepingContainer', ':setupDockerNetwork']
    targetContainerId { createSleepingContainer.containerName }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        }
        else throw exception
    }

}

task stopSleepingContainer(type: DockerStopContainer) {
    targetContainerId { createSleepingContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createSleepingContainer.containerName + " has already been stopped")
        }
        else throw exception
    }

}

task removeDockerContainer(type: DockerRemoveContainer) {
    dependsOn stopDockerContainer
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task removeSleepingContainer(type: DockerRemoveContainer) {
    dependsOn stopSleepingContainer
    targetContainerId { createSleepingContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createSleepingContainer.containerName + " has already been removed")
        } else throw exception
    }

}

task stopDockerContainerOnStartup(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task stopSleepingContainerOnStartup(type: DockerStopContainer) {
    targetContainerId { createSleepingContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createSleepingContainer.containerName + " has already been stopped")
        } else throw exception
    }

}

task removeDockerContainerOnStartup(type: DockerRemoveContainer) {
    dependsOn stopDockerContainerOnStartup
    targetContainerId { createDockerContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createDockerContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task removeSleepingContainerOnStartup(type: DockerRemoveContainer) {
    dependsOn stopSleepingContainerOnStartup
    targetContainerId { createSleepingContainer.containerName }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println("Container " + createSleepingContainer.containerName + " has already been removed")
        } else throw exception
    }
}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    imageName = dockerImageName
    tag = version
}
